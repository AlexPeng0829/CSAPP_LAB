#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
# 1. use IADDQ
# 2. use loop unrolling
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-4,%rdx		# len < 4?
	jl Remain_start

	irmovq $1, %rcx
Loop:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...


	xorq %r12,%r12
	xorq %r13,%r13
	xorq %r14,%r14
	xorq %rbx,%rbx

	andq %r8, %r8
	cmovg %rcx, %r12
	andq %r9, %r9
	cmovg %rcx, %r13
	andq %r10, %r10
	cmovg %rcx, %r14
	andq %r11, %r11
	cmovg %rcx, %rbx
	addq %r12, %r13
	addq %r14, %rbx
	addq %r13, %rbx
	addq %rbx, %rax

	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst


	iaddq $32, %rdi		# src += 4
	iaddq $32, %rsi		# dst += 4
	iaddq $-4, %rdx		# len -4 >= 0?
	jge Loop			# if so, goto Loop:

Remain_start:
	iaddq $4, %rdx
	je Done
Remain_loop:
	mrmovq (%rdi), %r8	# read val from src...

	rmmovq %r8, (%rsi)	# read val from src...
	iaddq $8, %rdi
	iaddq $8, %rsi
	andq %r8, %r8
	jle Neg
	iaddq $1, %rax
Neg:
	iaddq $-1, %rdx
	jg Remain_loop
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
