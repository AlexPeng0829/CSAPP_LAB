                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6e802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 804f01000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | # 1. use IADDQ
                            | # 2. use loop unrolling
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 
0x03d: 30f10100000000000000 | 	irmovq $1, %rcx
0x047: 6222                 | 	andq %rdx, %rdx
0x049: 714e01000000000000   | 	jle Done
0x052: c0f2fcffffffffffffff | 	iaddq $-4,%rdx		# len < 4?
0x05c: 72f800000000000000   | 	jl Remain_start
                            | 
0x065:                      | Loop:
0x065: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x06f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x079: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x083: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
                            | 
0x08d: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x097: 40960000000000000000 | 	rmmovq %r9, (%rsi)	# ...and store it to dst
0x0a1: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0ab: 40b60000000000000000 | 	rmmovq %r11, (%rsi)	# ...and store it to dst
                            | 
0x0b5: 63cc                 | 	xorq %r12,%r12
0x0b7: 63dd                 | 	xorq %r13,%r13
0x0b9: 63ee                 | 	xorq %r14,%r14
                            | 
0x0bb: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0bd: 261c                 | 	cmovg %rcx, %r12
0x0bf: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0c1: 261d                 | 	cmovg %rcx, %r13
0x0c3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0c5: 261e                 | 	cmovg %rcx, %r14
0x0c7: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x0c9: 2610                 | 	cmovg %rcx, %rax
0x0cb: 60cd                 | 	addq %r12, %r13
0x0cd: 60e0                 | 	addq %r14, %rax
0x0cf: 60d0                 | 	addq %r13, %rax  # positive number
                            | 
0x0d1: c0f72000000000000000 | 	iaddq $32, %rdi		# src += 4
0x0db: c0f62000000000000000 | 	iaddq $32, %rsi		# dst += 4
0x0e5: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len -4 >= 0?
0x0ef: 756500000000000000   | 	jge Loop			# if so, goto Loop:
                            | 
0x0f8:                      | Remain_start:
0x0f8: c0f20400000000000000 | 	iaddq $4, %rdx
0x102: 734e01000000000000   | 	je Done
0x10b:                      | Remain_loop:
0x10b: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x115: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# read val from src...
0x11f: 63cc                 | 	xorq %r12,%r12
0x121: 6288                 | 	andq %r8, %r8		# val >= 0?
0x123: 261c                 | 	cmovg %rcx, %r12
0x125: 60c0                 | 	addq %r12, %rax
0x127: c0f70800000000000000 | 	iaddq $8, %rdi
0x131: c0f60800000000000000 | 	iaddq $8, %rsi
0x13b: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x145: 760b01000000000000   | 	jg Remain_loop
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x14e:                      | Done:
0x14e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x14f:                      | End:
                            | #/* $end ncopy-ys */
0x14f:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x14f:                      | check:
                            | 	# Return value test
0x14f: 30fa0100000000000000 | 	irmovq $1,%r10
0x159: 61a0                 | 	subq %r10,%rax
0x15b: 737701000000000000   | 	je checkb
0x164: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x16e: 70b502000000000000   | 	jmp cdone
0x177:                      | checkb:
                            | 	# Code length check
0x177: 30f04f01000000000000 | 	irmovq EndFun,%rax
0x181: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x18b: 6120                 | 	subq %rdx,%rax
0x18d: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x197: 6102                 | 	subq %rax,%rdx
0x199: 75b501000000000000   | 	jge checkm
0x1a2: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x1ac: 70b502000000000000   | 	jmp cdone
0x1b5:                      | checkm:
0x1b5: 30f2e802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x1bf: 30f3b802000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x1c9: 30f70400000000000000 | 	irmovq $4,%rdi  # Count
0x1d3: 6277                 | 	andq %rdi,%rdi
0x1d5: 733302000000000000   | 	je checkpre         # Skip check if count = 0
0x1de:                      | mcloop:
0x1de: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x1e8: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x1f2: 6160                 | 	subq %rsi,%rax
0x1f4: 731002000000000000   | 	je  mok
0x1fd: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x207: 70b502000000000000   | 	jmp cdone
0x210:                      | mok:
0x210: 30f00800000000000000 | 	irmovq $8,%rax
0x21a: 6002                 | 	addq %rax,%rdx	  # dest ++
0x21c: 6003                 | 	addq %rax,%rbx    # src++
0x21e: 30f00100000000000000 | 	irmovq $1,%rax
0x228: 6107                 | 	subq %rax,%rdi    # cnt--
0x22a: 76de01000000000000   | 	jg mcloop
0x233:                      | checkpre:
                            | 	# Check for corruption
0x233: 30f2e002000000000000 | 	irmovq Predest,%rdx
0x23d: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x247: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x251: 6120                 | 	subq %rdx,%rax
0x253: 736f02000000000000   | 	je checkpost
0x25c: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x266: 70b502000000000000   | 	jmp cdone
0x26f:                      | checkpost:
                            | 	# Check for corruption
0x26f: 30f20803000000000000 | 	irmovq Postdest,%rdx
0x279: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x283: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x28d: 6120                 | 	subq %rdx,%rax
0x28f: 73ab02000000000000   | 	je checkok
0x298: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x2a2: 70b502000000000000   | 	jmp cdone
0x2ab:                      | checkok:
                            | 	# Successful checks
0x2ab: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x2b5:                      | cdone:
0x2b5: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2b8:                      | 	.align 8
0x2b8:                      | src:
0x2b8: ffffffffffffffff     | 	.quad -1
0x2c0: feffffffffffffff     | 	.quad -2
0x2c8: fdffffffffffffff     | 	.quad -3
0x2d0: 0400000000000000     | 	.quad 4
0x2d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2e0:                      | 	.align 16
0x2e0:                      | Predest:
0x2e0: fadebc0000000000     | 	.quad 0xbcdefa
0x2e8:                      | dest:
0x2e8: abefcd0000000000     | 	.quad 0xcdefab
0x2f0: abefcd0000000000     | 	.quad 0xcdefab
0x2f8: abefcd0000000000     | 	.quad 0xcdefab
0x300: abefcd0000000000     | 	.quad 0xcdefab
0x308:                      | Postdest:
0x308: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x310:                      | .align 8
                            | # Run time stack
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
                            | 
0x390:                      | Stack:
